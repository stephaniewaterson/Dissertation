print(table2);
//Center and display the table, zoom = 8
Map.centerObject(table2, 8)
Map.addLayer(table2, {}, 'Studland');

var studyArea = ee.FeatureCollection(table2).geometry()


var filtered_region = ee.ImageCollection("COPERNICUS/S2")
.filterBounds(geometry)
.filterDate('2019-08-01', '2019-08-10');

print(filtered_region.size())

var imgList = filtered_region.toList(3);
print('Firsts image', imgList);



var cloudyImage = ee.Image('COPERNICUS/S2/20190902T112111_20190902T112646_T30UWB').select('B2', 'B3', 'B4', 'QA60').rename('B', 'G', 'R', 'QA60');

// vizualise cloudy image
var trueColour = {bands: ['R', 'G', 'B'],min: 0,max: 3000};
Map.addLayer(cloudyImage.clip(geometry2), trueColour, 'True colour cloudy image');

// cloud masking
var qa = cloudyImage.select('QA60');
// Bits 10 and 11 are clouds and cirrus, respectively
var cloudBitMask = ee.Number(2).pow(10).int();
var cirrusBitMask = ee.Number(2).pow(11).int();
// vizualise clouds and cirrus
var qa = cloudyImage.select('QA60');
Map.addLayer(qa.bitwiseAnd(cloudBitMask).neq(0).clip(geometry2), {}, 'clouds');
Map.addLayer(qa.bitwiseAnd(cirrusBitMask).neq(0).clip(geometry2), {}, 'cirrus');
// both flags, clouds and cirrus, should be set to zero, indicating clear conditions
var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(qa.bitwiseAnd(cirrusBitMask).eq(0));
var cloudyImage_masked = cloudyImage.updateMask(mask);
Map.addLayer(cloudyImage_masked.clip(geometry2), trueColour, 'True colour masked cloudy image');

function maskS2clouds(image) {
var cloudBitMask = ee.Number(2).pow(10).int();
var cirrusBitMask = ee.Number(2).pow(11).int();
var qa = image.select('QA60');
var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(qa.bitwiseAnd(cirrusBitMask).eq(0));
return image.updateMask(mask);
}
//rename bands
function renameS2bands(image){
return image.rename('B', 'G', 'R', 'NIR', 'SWIR', 'SWIR2', 'QA60')
}

// load Sentinel-2 TOA reflectance data.

var s2collection = ee.ImageCollection('COPERNICUS/S2_SR')
.filterDate('2019-07-01', '2019-09-30')
.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
.filterBounds(geometry2)
.select('B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'QA60')
.map(maskS2clouds)
.map(renameS2bands);




Map.addLayer(studland, {color: 'FF0000'}, 'poly1');
Map.addLayer(minusstudland, {color: '0000FF'}, 'poly2');

var intersection = studland.intersection(minusstudland, ee.ErrorMargin(1));
Map.addLayer(intersection, {color: '00FF00'}, 'intersection');

// Compute the union, display it in magenta.
var union = studland.union(minusstudland, ee.ErrorMargin(1));
Map.addLayer(union, {color: 'FF00FF'}, 'union');

// Compute the difference, display in yellow.
var diff1 = studland.difference(minusstudland, ee.ErrorMargin(1));
Map.addLayer(diff1, {color: 'FFFF00'}, 'diff1');

// Compute symmetric difference, display in black.
var symDiff = studland.symmetricDifference(minusstudland, ee.ErrorMargin(1));
Map.addLayer(symDiff, {color: '000000'}, 'symmetric difference');


// vizualise median-based composite
var s2collection = ee.ImageCollection('COPERNICUS/S2_SR')
.filterDate('2019-07-01', '2019-09-30')
.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
.filterBounds(geometry)
.select('B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'QA60')
.map(maskS2clouds)
.map(renameS2bands);
var s2_median = s2collection.median()
Map.addLayer(s2_median.clip(geometry), {bands: ['R', 'G', 'B'], min: 0, max: 4000, gamma: 1.5}, 'Sentinel-2 RGB median composite');
// merge training points into a single FeatureCollection

var singlefc = seagrass.merge(notseagrass);

print(singlefc, 'Single training points')

// Select the bands for training and define input data

var bands = ['B', 'G', 'R', 'NIR', 'SWIR', 'SWIR2'];
var input = s2_median;

// Sample the input imagery to get a FeatureCollection of training/test data.

var samples = input.select(bands).sampleRegions({
collection: singlefc,
properties: ['landcover'],
scale: 20
});

// data partition
// add random column
var ran = samples.randomColumn({columnName:'x',seed:2});

// define split

var split = 0.7; // 70% training, 30% testing.
// split random column in 2 groups
var training = ran.filter(ee.Filter.lt('x',split));// for training
var testing = ran.filter(ee.Filter.gte('x',split));// for accuracy

// training procedure

// Mininum distance classifier using euclidean distance

var md_classifier = ee.Classifier.minimumDistance('mahalanobis').train({
features: training,
classProperty: 'landcover',
inputProperties: bands,
});

// define a palette for the land cover classification.

var palette = [
 '225129',  'aec3d4', // seagrass
];
// classify the input imagery.
var md_classified = input.select(bands).classify(md_classifier);
// display the classification result and the input image.
Map.addLayer(md_classified.clip(geometry), {min: 0, max: 2, palette: palette}, 'Land Cover Classification - Minimun distance classifier');

// predict over the test set

var test_prediction = testing.classify(md_classifier);

// perfomance metrics - test set

var errorMatrix = test_prediction.errorMatrix('landcover', 'classification');
var OAV = errorMatrix.accuracy();
var UAV = errorMatrix.consumersAccuracy();
var PAV = errorMatrix.producersAccuracy();
var Kappa = errorMatrix.kappa();
print('Performance metrics - Minimun distance classifier'); print('Error Matrix:', errorMatrix);
print('Overall Accuracy:', OAV);
print('User Accuracy:', UAV);
print('Producer Accuracy:', PAV);
print('Kappa Coefficient: ', Kappa);

// Area calculation
var names = ['seagrass', 'notseagrass']
var count = md_classified.eq([0,1]).rename(names);
var total = count.multiply(ee.Image.pixelArea()).divide(1000*1000);
var area = total.reduceRegion({
reducer:ee.Reducer.sum(),
geometry:geometry,
scale:20,
maxPixels: 1e11,
bestEffort:true
});
var area_pxa = ee.Number(area)
print ('Area in km2:', area_pxa)

// Random Forest classifier

var rf_classifier = ee.Classifier.smileRandomForest({numberOfTrees:100}).train({
features: training,
classProperty: 'landcover',
inputProperties: bands
});

// load Sentinel data for two summer periods

var s2collection_2018 = ee.ImageCollection('COPERNICUS/S2_SR')
.filterDate('2018-07-01', '2018-09-30')
.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
.filterBounds(geometry)
.select('B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'QA60')
.map(maskS2clouds)
.map(renameS2bands);
var s2collection_2019 = ee.ImageCollection('COPERNICUS/S2_SR')
.filterDate('2019-07-01', '2019-09-30')
.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
.filterBounds(geometry)
.select('B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'QA60')
.map(maskS2clouds)
.map(renameS2bands);


// create median-based composites

var s2_median_2018 = s2collection_2018.median()
var s2_median_2019 = s2collection_2019.median()

// classify the input imagery according to the trained algorithm
var md_classified_2018 = s2_median_2018.select(bands).classify(md_classifier);
var md_classified_2019 = s2_median_2019.select(bands).classify(md_classifier);

// vizualise classified maps

// define a palette for the land cover classification.

var palette = [
'aec3d4', '225129'// greenvegetation (2) // green
];

// display 2018 and 2019 classification maps
Map.addLayer(md_classified_2018.clip(geometry), {min: 0, max: 2, palette: palette}, '2018 Land Cover Classification');
Map.addLayer(md_classified_2019.clip(geometry), {min: 0, max: 2, palette: palette}, '2019 Land Cover Classification');

// highlight changes

var changeImage = md_classified_2018.multiply(10).add(md_classified_2019).rename('change');
Map.addLayer(changeImage.randomVisualizer().clip(geometry),'','Change detection (multiple classes)')

// remap unchanged areas to 0
var binaryChange = changeImage.remap([0,11,22],[0,0,0],1);
// vizualise change/no-change
Map.addLayer(binaryChange.clip(geometry),{min:0,max:1},'Change/No-Change');

// Reclassify classes of the target image for avoiding confusion with the background pixels (set as 0 by default)
var md_classified_2018_remap = md_classified_2018.remap([0,1,2],[1,2,3],1)
// export 2018 classifier map

Export.image.toDrive({
image: md_classified_2018.clip(geometry),
description: 'studland18',
folder: 'P3_imageclassification',
fileNamePrefix: 'studland18',
region: geometry,
scale: 30,
maxPixels: 1e10,
fileFormat: 'GeoTIFF'
})
